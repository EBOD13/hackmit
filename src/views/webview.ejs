<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>POI Quest - Adventure Awaits</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(
          135deg,
          #667eea 0%,
          #764ba2 50%,
          #f093fb 100%
        );
        min-height: 100vh;
        color: #ffffff;
        overflow-x: hidden;
      }

      .container {
        max-width: 420px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px 0;
      }

      .header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(45deg, #fff, #f0f0f0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 8px;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
      }

      .header .subtitle {
        font-size: 1rem;
        opacity: 0.9;
        font-weight: 300;
      }

      .card {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 24px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
      }

      .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
      }

      .card-header h2 {
        font-size: 1.4rem;
        font-weight: 600;
        margin-left: 12px;
        color: #ffffff;
      }

      .card-icon {
        font-size: 1.8rem;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
      }

      /* User Stats */
      .user-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 16px;
      }

      .stat-item {
        text-align: center;
        padding: 16px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.15);
      }

      .stat-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: #ffffff;
        margin-bottom: 4px;
      }

      .stat-label {
        font-size: 0.85rem;
        opacity: 0.8;
        font-weight: 400;
      }

      /* Quest Card */
      .quest-content {
        background: rgba(0, 0, 0, 0.15);
        border-radius: 16px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .quest-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 12px;
        color: #ffffff;
      }

      .quest-description {
        font-size: 1rem;
        line-height: 1.5;
        margin-bottom: 16px;
        opacity: 0.9;
      }

      .quest-details {
        display: flex;
        flex-direction: column;
        gap: 8px;
        font-size: 0.9rem;
        opacity: 0.85;
      }

      .quest-detail-item {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      /* Buttons */
      .button {
        width: 100%;
        padding: 16px 24px;
        border: none;
        border-radius: 16px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 12px;
        position: relative;
        overflow: hidden;
      }

      .button:last-child {
        margin-bottom: 0;
      }

      .button-primary {
        background: linear-gradient(45deg, #ff6b6b, #feca57);
        color: #ffffff;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
      }

      .button-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
      }

      .button-secondary {
        background: rgba(255, 255, 255, 0.2);
        color: #ffffff;
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .button-secondary:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-1px);
      }

      .button-success {
        background: linear-gradient(45deg, #48cae4, #023e8a);
        color: #ffffff;
        box-shadow: 0 4px 15px rgba(72, 202, 228, 0.4);
      }

      .button-success:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(72, 202, 228, 0.6);
      }

      .button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      /* Leaderboard */
      .leaderboard-list {
        list-style: none;
        max-height: 300px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
      }

      .leaderboard-list::-webkit-scrollbar {
        width: 6px;
      }

      .leaderboard-list::-webkit-scrollbar-track {
        background: transparent;
      }

      .leaderboard-list::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
      }

      .leaderboard-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        margin-bottom: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.15);
        transition: all 0.2s ease;
      }

      .leaderboard-item:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateX(4px);
      }

      .leaderboard-item.rank-1 {
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #333;
        font-weight: 600;
      }

      .leaderboard-item.rank-2 {
        background: linear-gradient(45deg, #c0c0c0, #e8e8e8);
        color: #333;
        font-weight: 600;
      }

      .leaderboard-item.rank-3 {
        background: linear-gradient(45deg, #cd7f32, #daa520);
        color: #fff;
        font-weight: 600;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .player-rank {
        font-weight: 700;
        font-size: 1.1rem;
      }

      .player-name {
        font-weight: 500;
      }

      .player-points {
        font-weight: 600;
        opacity: 0.9;
      }

      /* Loading States */
      .loading {
        text-align: center;
        padding: 20px;
        opacity: 0.7;
      }

      .spinner {
        width: 32px;
        height: 32px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 12px;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      /* Responsive Design */
      @media (max-width: 480px) {
        .container {
          padding: 16px;
        }

        .header h1 {
          font-size: 2rem;
        }

        .card {
          padding: 20px;
        }

        .user-stats {
          grid-template-columns: 1fr;
        }
      }

      /* Animations */
      .card {
        animation: slideUp 0.6s ease-out;
      }

      .card:nth-child(2) {
        animation-delay: 0.1s;
      }

      .card:nth-child(3) {
        animation-delay: 0.2s;
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- Header -->
      <div class="header">
        <h1>üéÆ POI Quest</h1>
        <div class="subtitle">Adventure awaits around every corner</div>
      </div>

      <!-- User Profile Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">üë§</div>
          <h2>Your Profile</h2>
        </div>
        <div class="user-stats">
          <div class="stat-item">
            <div class="stat-value" id="userPoints">
              <%= userStats ? userStats.total_points : 0 %>
            </div>
            <div class="stat-label">Total Points</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="userQuests">
              <%= userStats ? userStats.quests_completed : 0 %>
            </div>
            <div class="stat-label">Quests Completed</div>
          </div>
        </div>
        <% if (userId) { %>
        <div style="text-align: center; opacity: 0.8; font-size: 0.9rem">
          Logged in as: <strong><%= userId %></strong>
        </div>
        <% } else { %>
        <div style="text-align: center; opacity: 0.8; color: #feca57">
          ‚ö†Ô∏è Not logged in
        </div>
        <% } %>
      </div>

      <!-- Current Quest Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">üéØ</div>
          <h2>Current Quest</h2>
        </div>

        <div id="questDisplay">
          <% if (currentQuest && questTemplate) { %>
          <div class="quest-content">
            <div class="quest-title"><%= questTemplate.title %></div>
            <div class="quest-description">
              <%= questTemplate.description %>
            </div>
            <div class="quest-details">
              <div class="quest-detail-item">
                <span>üìç</span>
                <span><strong><%= questTemplate.location_name %></strong></span>
              </div>
              <div class="quest-detail-item">
                <span>üè†</span>
                <span><%= questTemplate.location_address %></span>
              </div>
              <div class="quest-detail-item">
                <span>üèÜ</span>
                <span><strong><%= questTemplate.points %> points</strong></span>
              </div>
              <% if (questTemplate.required_items &&
              questTemplate.required_items.length > 0) { %>
              <div class="quest-detail-item">
                <span>üéí</span>
                <span
                  >Bring: <%= Array.isArray(questTemplate.required_items) ?
                  questTemplate.required_items.join(', ') :
                  questTemplate.required_items %></span
                >
              </div>
              <% } %> <% if (questTemplate.historical_significance) { %>
              <div class="quest-detail-item">
                <span>üèõÔ∏è</span>
                <span><%= questTemplate.historical_significance %></span>
              </div>
              <% } %> <% if (questTemplate.cultural_info) { %>
              <div class="quest-detail-item">
                <span>üé≠</span>
                <span><%= questTemplate.cultural_info %></span>
              </div>
              <% } %>
            </div>
          </div>

          <button class="button button-success" onclick="completeQuest()">
            ‚úÖ Complete Quest
          </button>
          <button class="button button-secondary" onclick="rerollQuest()">
            üîÑ Get Different Quest
          </button>
          <% } else { %>
          <div class="quest-content">
            <div style="text-align: center; padding: 20px; opacity: 0.8">
              <div style="font-size: 3rem; margin-bottom: 16px">üó∫Ô∏è</div>
              <div style="font-size: 1.2rem; margin-bottom: 8px">
                No Active Quest
              </div>
              <div style="font-size: 0.9rem">
                Ready to start your adventure?
              </div>
            </div>
          </div>

          <button class="button button-primary" onclick="getNewQuest()">
            üéØ Get New Quest
          </button>
          <% } %>
        </div>

        <div id="loading" class="loading" style="display: none">
          <div class="spinner"></div>
          <div>Generating your quest...</div>
        </div>
      </div>

      <!-- Leaderboard Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">üèÜ</div>
          <h2>Leaderboard</h2>
        </div>

        <ul class="leaderboard-list" id="leaderboard">
          <div class="loading">
            <div class="spinner"></div>
            <div>Loading leaderboard...</div>
          </div>
        </ul>
      </div>
    </div>

    <script>
      // API functions
      async function apiCall(endpoint, method = "POST") {
        const loading = document.getElementById("loading");
        loading.style.display = "block";

        try {
          const response = await fetch(endpoint, {
            method: method,
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (result.success) {
            // Reload the page to show updated quest state
            window.location.reload();
          } else {
            alert("Error: " + (result.message || "Something went wrong"));
          }
        } catch (error) {
          console.error("API Error:", error);
          alert("Error: Unable to communicate with server");
        } finally {
          loading.style.display = "none";
        }
      }

      function getNewQuest() {
        apiCall("/api/quest/new");
      }

      function completeQuest() {
        if (confirm("üéâ Are you sure you want to complete this quest?")) {
          apiCall("/api/quest/complete");
        }
      }

      function rerollQuest() {
        if (
          confirm(
            "üîÑ Get a different quest? This will abandon your current quest."
          )
        ) {
          apiCall("/api/quest/reroll");
        }
      }

      // Leaderboard functionality
      async function loadLeaderboard() {
        try {
          const res = await fetch("/api/leaderboard");
          const data = await res.json();

          if (!data || !Array.isArray(data)) {
            throw new Error("Invalid leaderboard data");
          }

          data.sort((a, b) => b.total_points - a.total_points);

          const list = document.getElementById("leaderboard");
          list.innerHTML = "";

          if (data.length === 0) {
            list.innerHTML = '<div class="loading">No players yet</div>';
            return;
          }

          data.forEach((player, index) => {
            const li = document.createElement("li");
            li.className = `leaderboard-item ${
              index < 3 ? "rank-" + (index + 1) : ""
            }`;

            li.innerHTML = `
              <div class="player-info">
                <span class="player-rank">#${index + 1}</span>
                <span class="player-name">${player.id}</span>
              </div>
              <span class="player-points">${player.total_points} pts</span>
            `;

            list.appendChild(li);
          });
        } catch (err) {
          console.error("Failed to load leaderboard:", err);
          const list = document.getElementById("leaderboard");
          list.innerHTML =
            '<div class="loading">Failed to load leaderboard</div>';
        }
      }

      // Auto-refresh functionality
      function startAutoRefresh() {
        // Refresh leaderboard every 30 seconds
        setInterval(loadLeaderboard, 30000);

        // Refresh page every 2 minutes if not loading
        setInterval(() => {
          const loading = document.getElementById("loading");
          if (loading.style.display !== "block") {
            loadLeaderboard();
          }
        }, 120000);
      }

      // Initialize on page load
      window.addEventListener("DOMContentLoaded", () => {
        loadLeaderboard();
        startAutoRefresh();
      });

      // Add some visual feedback for button interactions
      document.addEventListener("click", function (e) {
        if (e.target.classList.contains("button")) {
          e.target.style.transform = "scale(0.98)";
          setTimeout(() => {
            e.target.style.transform = "";
          }, 150);
        }
      });
    </script>
  </body>
</html>



<!-- // Other Version -->

<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>POI Quest - Adventure Awaits</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      :root {
        --color-sand: #E7DECC;
        --color-earth: #7C6354;
        --color-treasure: #D4AF37;
        --color-adventure: #3A6351;
        --color-sky: #8ECAE6;
        --color-deep-blue: #023047;
        --color-card-bg: rgba(255, 255, 255, 0.93);
        --color-text-dark: #2D3436;
        --color-text-light: #636E72;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(to bottom, var(--color-sky), var(--color-sand));
        min-height: 100vh;
        color: var(--color-text-dark);
        overflow-x: hidden;
        position: relative;
      }

      body::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
        pointer-events: none;
        z-index: -1;
      }

      .container {
        max-width: 480px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px 0;
        position: relative;
      }

      .compass-icon {
        position: absolute;
        top: 0;
        right: 20px;
        width: 60px;
        height: 60px;
        animation: spin 20s linear infinite;
        opacity: 0.7;
      }

      .header h1 {
        font-family: 'Playfair Display', serif;
        font-size: 2.8rem;
        font-weight: 700;
        color: var(--color-deep-blue);
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .header .subtitle {
        font-size: 1.1rem;
        color: var(--color-earth);
        font-weight: 500;
        max-width: 300px;
        margin: 0 auto;
        line-height: 1.4;
      }

      .card {
        background: var(--color-card-bg);
        border-radius: 20px;
        padding: 24px;
        margin-bottom: 24px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.5);
      }

      .card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(to right, var(--color-treasure), var(--color-adventure));
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
      }

      .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
      }

      .card-header h2 {
        font-size: 1.4rem;
        font-weight: 600;
        margin-left: 12px;
        color: var(--color-deep-blue);
      }

      .card-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--color-treasure), var(--color-earth));
        border-radius: 12px;
        color: white;
        font-size: 1.4rem;
      }

      /* User Stats */
      .user-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 16px;
      }

      .stat-item {
        text-align: center;
        padding: 16px;
        background: rgba(234, 234, 234, 0.5);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.5);
        transition: all 0.3s ease;
      }

      .stat-item:hover {
        background: rgba(255, 255, 255, 0.8);
        transform: scale(1.03);
      }

      .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--color-treasure);
        margin-bottom: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
      }

      .stat-label {
        font-size: 0.85rem;
        color: var(--color-earth);
        font-weight: 500;
      }

      /* Quest Card */
      .quest-content {
        background: rgba(255, 249, 230, 0.7);
        border-radius: 16px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 235, 183, 0.5);
        position: relative;
      }

      .quest-content::after {
        content: "‚ú¶";
        position: absolute;
        bottom: 10px;
        right: 15px;
        color: var(--color-treasure);
        opacity: 0.3;
        font-size: 1.5rem;
      }

      .quest-title {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 12px;
        color: var(--color-deep-blue);
        font-family: 'Playfair Display', serif;
      }

      .quest-description {
        font-size: 1rem;
        line-height: 1.5;
        margin-bottom: 16px;
        color: var(--color-text-light);
      }

      .quest-details {
        display: flex;
        flex-direction: column;
        gap: 10px;
        font-size: 0.9rem;
      }

      .quest-detail-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 0;
        border-bottom: 1px solid rgba(0,0,0,0.05);
      }

      .quest-detail-item:last-child {
        border-bottom: none;
      }

      .quest-detail-item span:first-child {
        font-size: 1.2rem;
        width: 24px;
        text-align: center;
      }

      /* Buttons */
      .button {
        width: 100%;
        padding: 18px 24px;
        border: none;
        border-radius: 14px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 12px;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
      }

      .button:last-child {
        margin-bottom: 0;
      }

      .button-primary {
        background: linear-gradient(45deg, var(--color-treasure), #E6C05A);
        color: var(--color-deep-blue);
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.4);
      }

      .button-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(212, 175, 55, 0.5);
      }

      .button-secondary {
        background: rgba(255, 255, 255, 0.9);
        color: var(--color-deep-blue);
        border: 1px solid rgba(212, 175, 55, 0.3);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      }

      .button-secondary:hover {
        background: rgba(255, 255, 255, 1);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      }

      .button-success {
        background: linear-gradient(45deg, var(--color-adventure), #4D7C6A);
        color: white;
        box-shadow: 0 4px 15px rgba(58, 99, 81, 0.4);
      }

      .button-success:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(58, 99, 81, 0.5);
      }

      .button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      /* Leaderboard */
      .leaderboard-list {
        list-style: none;
        max-height: 300px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--color-treasure) transparent;
      }

      .leaderboard-list::-webkit-scrollbar {
        width: 6px;
      }

      .leaderboard-list::-webkit-scrollbar-track {
        background: transparent;
      }

      .leaderboard-list::-webkit-scrollbar-thumb {
        background: var(--color-treasure);
        border-radius: 3px;
      }

      .leaderboard-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 16px;
        margin-bottom: 8px;
        background: rgba(234, 234, 234, 0.5);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.5);
        transition: all 0.2s ease;
      }

      .leaderboard-item:hover {
        background: rgba(255, 255, 255, 0.8);
        transform: translateX(4px);
      }

      .leaderboard-item.rank-1 {
        background: linear-gradient(45deg, #FFEFBA, #FFFFFF);
        color: #333;
        font-weight: 600;
        border: 1px solid rgba(212, 175, 55, 0.3);
      }

      .leaderboard-item.rank-2 {
        background: linear-gradient(45deg, #E6E6E6, #F9F9F9);
        color: #333;
        font-weight: 600;
        border: 1px solid rgba(192, 192, 192, 0.3);
      }

      .leaderboard-item.rank-3 {
        background: linear-gradient(45deg, #E9D2B3, #F8ECD9);
        color: #333;
        font-weight: 600;
        border: 1px solid rgba(205, 127, 50, 0.3);
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .player-rank {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--color-earth);
      }

      .player-name {
        font-weight: 500;
        color: var(--color-deep-blue);
      }

      .player-points {
        font-weight: 700;
        color: var(--color-treasure);
      }

      /* Loading States */
      .loading {
        text-align: center;
        padding: 20px;
        opacity: 0.7;
      }

      .spinner {
        width: 32px;
        height: 32px;
        border: 3px solid rgba(59, 99, 81, 0.2);
        border-top: 3px solid var(--color-adventure);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 12px;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Mini Map */
      .mini-map {
        height: 160px;
        border-radius: 12px;
        margin-bottom: 20px;
        overflow: hidden;
        border: 2px solid var(--color-treasure);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      /* Adventure Prompt */
      .adventure-prompt {
        text-align: center;
        padding: 20px;
        background: linear-gradient(rgba(255,255,255,0.7), rgba(255,255,255,0.9));
        border-radius: 16px;
        margin: 20px 0;
        border: 2px dashed var(--color-treasure);
      }

      .adventure-prompt h3 {
        color: var(--color-deep-blue);
        margin-bottom: 10px;
        font-size: 1.3rem;
      }

      .adventure-prompt p {
        color: var(--color-earth);
        margin-bottom: 15px;
      }

      /* Treasure Badge */
      .treasure-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        width: 40px;
        height: 40px;
        background: var(--color-treasure);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        box-shadow: 0 4px 10px rgba(212, 175, 55, 0.5);
        z-index: 2;
      }

      /* Responsive Design */
      @media (max-width: 480px) {
        .container {
          padding: 16px;
        }
        
        .header h1 {
          font-size: 2.2rem;
        }
        
        .card {
          padding: 20px;
        }
        
        .user-stats {
          grid-template-columns: 1fr;
        }

        .compass-icon {
          width: 50px;
          height: 50px;
          right: 10px;
        }
      }

      /* Animations */
      .card {
        animation: slideUp 0.6s ease-out;
      }

      .card:nth-child(2) {
        animation-delay: 0.1s;
      }

      .card:nth-child(3) {
        animation-delay: 0.2s;
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .pulse {
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
      }

      .user-status {
        text-align: center;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        margin-top: 10px;
        display: inline-block;
      }

      .status-logged-in {
        background: rgba(58, 99, 81, 0.1);
        color: var(--color-adventure);
        border: 1px solid rgba(58, 99, 81, 0.2);
      }

      .status-logged-out {
        background: rgba(255, 193, 7, 0.1);
        color: #FFC107;
        border: 1px solid rgba(255, 193, 7, 0.2);
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- Header -->
      <div class="header">
        <svg class="compass-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
          <path d="M14.8284 14.8284L16.2426 16.2426L14.8284 14.8284ZM9.17157 9.17157L7.75736 7.75736L9.17157 9.17157ZM14.8284 9.17157L16.2426 7.75736L14.8284 9.17157ZM9.17157 14.8284L7.75736 16.2426L9.17157 14.8284ZM12 8L14 12L12 16L10 12L12 8Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <h1>POI Quest</h1>
        <div class="subtitle">Discover hidden treasures in your world</div>
      </div>

      <!-- User Profile Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">üß≠</div>
          <h2>Explorer Profile</h2>
        </div>
        <div class="user-stats">
          <div class="stat-item">
            <div class="stat-value" id="userPoints"><%= userStats ? userStats.total_points : 0 %></div>
            <div class="stat-label">Total Points</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="userQuests"><%= userStats ? userStats.quests_completed : 0 %></div>
            <div class="stat-label">Quests Completed</div>
          </div>
        </div>
        <% if (userId) { %>
          <div class="user-status status-logged-in">
            Explorer: <strong><%= userId %></strong>
          </div>
        <% } else { %>
          <div class="user-status status-logged-out">
            ‚ö†Ô∏è Not logged in
          </div>
        <% } %>
      </div>

      <!-- Current Quest Card -->
      <div class="card">
        <div class="treasure-badge">!</div>
        <div class="card-header">
          <div class="card-icon">üó∫Ô∏è</div>
          <h2>Current Quest</h2>
        </div>
        
        <div id="questDisplay">
          <% if (currentQuest && questTemplate) { %>
            <!-- Mini Map -->
            <div class="mini-map" id="questMap">
              <!-- Map will be initialized by JavaScript -->
            </div>
            
            <div class="quest-content">
              <div class="quest-title"><%= questTemplate.title %></div>
              <div class="quest-description"><%= questTemplate.description %></div>
              <div class="quest-details">
                <div class="quest-detail-item">
                  <span>üìç</span>
                  <span><strong><%= questTemplate.location_name %></strong></span>
                </div>
                <div class="quest-detail-item">
                  <span>üè†</span>
                  <span><%= questTemplate.location_address %></span>
                </div>
                <div class="quest-detail-item">
                  <span>üèÜ</span>
                  <span><strong><%= questTemplate.points %> points</strong></span>
                </div>
                <% if (questTemplate.required_items && questTemplate.required_items.length > 0) { %>
                  <div class="quest-detail-item">
                    <span>üéí</span>
                    <span>Bring: <%= Array.isArray(questTemplate.required_items) ? questTemplate.required_items.join(', ') : questTemplate.required_items %></span>
                  </div>
                <% } %>
                <% if (questTemplate.historical_significance) { %>
                  <div class="quest-detail-item">
                    <span>üèõÔ∏è</span>
                    <span><%= questTemplate.historical_significance %></span>
                  </div>
                <% } %>
                <% if (questTemplate.cultural_info) { %>
                  <div class="quest-detail-item">
                    <span>üé≠</span>
                    <span><%= questTemplate.cultural_info %></span>
                  </div>
                <% } %>
              </div>
            </div>
            
            <button class="button button-success" onclick="completeQuest()">
              <span>‚úÖ</span> Complete Quest
            </button>
            <button class="button button-secondary" onclick="rerollQuest()">
              <span>üîÑ</span> Get Different Quest
            </button>
          <% } else { %>
            <div class="adventure-prompt">
              <h3>Ready for Adventure?</h3>
              <p>Discover hidden gems and fascinating locations in your area. Each quest brings new discoveries!</p>
            </div>
            
            <button class="button button-primary pulse" onclick="getNewQuest()">
              <span>üéØ</span> Begin New Quest
            </button>
          <% } %>
        </div>

        <div id="loading" class="loading" style="display: none;">
          <div class="spinner"></div>
          <div>Charting your course...</div>
        </div>
      </div>

      <!-- Leaderboard Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">üèÜ</div>
          <h2>Explorer Rankings</h2>
        </div>
        
        <ul class="leaderboard-list" id="leaderboard">
          <div class="loading">
            <div class="spinner"></div>
            <div>Loading rankings...</div>
          </div>
        </ul>
      </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
      // API functions
      async function apiCall(endpoint, method = 'POST') {
        const loading = document.getElementById('loading');
        loading.style.display = 'block';

        try {
          const response = await fetch(endpoint, {
            method: method,
            headers: {
              'Content-Type': 'application/json',
            }
          });

          const result = await response.json();

          if (result.success) {
            // Reload the page to show updated quest state
            window.location.reload();
          } else {
            alert('Error: ' + (result.message || 'Something went wrong'));
          }
        } catch (error) {
          console.error('API Error:', error);
          alert('Error: Unable to communicate with server');
        } finally {
          loading.style.display = 'none';
        }
      }

      function getNewQuest() {
        apiCall('/api/quest/new');
      }

      function completeQuest() {
        if (confirm('üéâ Have you successfully completed this quest?')) {
          apiCall('/api/quest/complete');
        }
      }

      function rerollQuest() {
        if (confirm('üîÑ Would you like a different adventure? This will abandon your current quest.')) {
          apiCall('/api/quest/reroll');
        }
      }

      // Initialize map if we have a quest with location
      function initMap() {
        // This would be replaced with actual coordinates from your backend
        // For demo purposes, we'll use a default location
        const defaultCoords = { lat: 40.7128, lng: -74.0060 }; // New York
        
        try {
          const mapElement = document.getElementById('questMap');
          if (!mapElement) return;
          
          const map = L.map('questMap').setView([defaultCoords.lat, defaultCoords.lng], 14);
          
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(map);
          
          L.marker([defaultCoords.lat, defaultCoords.lng])
            .addTo(map)
            .bindPopup('Adventure Location')
            .openPopup();
            
          // Add a circle to indicate approximate location area
          L.circle([defaultCoords.lat, defaultCoords.lng], {
            color: '#D4AF37',
            fillColor: '#f8e473',
            fillOpacity: 0.2,
            radius: 200
          }).addTo(map);
        } catch (e) {
          console.error('Error initializing map:', e);
          const mapElement = document.getElementById('questMap');
          if (mapElement) {
            mapElement.innerHTML = 
              '<div style="height:100%; display:flex; align-items:center; justify-content:center; background:#f0f0f0; color:#666;">Map unavailable</div>';
          }
        }
      }

      // Leaderboard functionality
      async function loadLeaderboard() {
        try {
          // For demo purposes, we'll create a mock leaderboard
          // In a real app, you would fetch this from your API
          const mockLeaderboard = [
            { id: "AdventureSeeker", total_points: 1250 },
            { id: "Explorer123", total_points: 980 },
            { id: "TravelBug", total_points: 875 },
            { id: "Wanderer", total_points: 760 },
            { id: "CuriousMind", total_points: 640 },
            { id: "TrailBlazer", total_points: 520 },
            { id: "Pathfinder", total_points: 430 }
          ];

          const list = document.getElementById("leaderboard");
          list.innerHTML = "";

          if (mockLeaderboard.length === 0) {
            list.innerHTML = '<div class="loading">No explorers yet</div>';
            return;
          }

          mockLeaderboard.forEach((player, index) => {
            const li = document.createElement("li");
            li.className = `leaderboard-item ${index < 3 ? 'rank-' + (index + 1) : ''}`;
            
            li.innerHTML = `
              <div class="player-info">
                <span class="player-rank">#${index + 1}</span>
                <span class="player-name">${player.id}</span>
              </div>
              <span class="player-points">${player.total_points} pts</span>
            `;
            
            list.appendChild(li);
          });
        } catch (err) {
          console.error("Failed to load leaderboard:", err);
          const list = document.getElementById("leaderboard");
          list.innerHTML = '<div class="loading">Failed to load rankings</div>';
        }
      }

      // Auto-refresh functionality
      function startAutoRefresh() {
        // Refresh leaderboard every 30 seconds
        setInterval(loadLeaderboard, 30000);
      }

      // Initialize on page load
      window.addEventListener("DOMContentLoaded", () => {
        initMap();
        loadLeaderboard();
        startAutoRefresh();
      });

      // Add some visual feedback for button interactions
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('button')) {
          e.target.style.transform = 'scale(0.98)';
          setTimeout(() => {
            e.target.style.transform = '';
          }, 150);
        }
      });
    </script>
  </body>
</html> -->