<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>POI Quest - Adventure Awaits</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(
          135deg,
          #667eea 0%,
          #764ba2 50%,
          #f093fb 100%
        );
        min-height: 100vh;
        color: #ffffff;
        overflow-x: hidden;
      }

      .container {
        max-width: 420px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px 0;
      }

      .header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(45deg, #fff, #f0f0f0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 8px;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
      }

      .header .subtitle {
        font-size: 1rem;
        opacity: 0.9;
        font-weight: 300;
      }

      .card {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 24px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
      }

      .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
      }

      .card-header h2 {
        font-size: 1.4rem;
        font-weight: 600;
        margin-left: 12px;
        color: #ffffff;
      }

      .card-icon {
        font-size: 1.8rem;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
      }

      /* User Stats */
      .user-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 16px;
      }

      .stat-item {
        text-align: center;
        padding: 16px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.15);
      }

      .stat-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: #ffffff;
        margin-bottom: 4px;
      }

      .stat-label {
        font-size: 0.85rem;
        opacity: 0.8;
        font-weight: 400;
      }

      /* Quest Card */
      .quest-content {
        background: rgba(0, 0, 0, 0.15);
        border-radius: 16px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .quest-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 12px;
        color: #ffffff;
      }

      .quest-description {
        font-size: 1rem;
        line-height: 1.5;
        margin-bottom: 16px;
        opacity: 0.9;
      }

      .quest-details {
        display: flex;
        flex-direction: column;
        gap: 8px;
        font-size: 0.9rem;
        opacity: 0.85;
      }

      .quest-detail-item {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      /* Directions Section */
      .directions-section {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .directions-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      }

      .directions-header span:first-child {
        font-size: 1.5rem;
      }

      .directions-header h3 {
        margin: 0;
        font-size: 1.2rem;
        font-weight: 600;
        color: #ffffff;
        flex-grow: 1;
      }

      .directions-distance {
        font-size: 0.9rem;
        opacity: 0.8;
        font-weight: 500;
      }

      .directions-content {
        line-height: 1.6;
      }

      .direction-step {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        padding: 10px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .direction-step:last-child {
        border-bottom: none;
      }

      .direction-step-number {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        font-weight: bold;
        flex-shrink: 0;
      }

      .direction-step-content {
        flex-grow: 1;
      }

      .direction-step-instruction {
        font-weight: 500;
        margin-bottom: 4px;
      }

      .direction-step-distance {
        font-size: 0.85rem;
        opacity: 0.7;
      }

      .directions-error {
        text-align: center;
        opacity: 0.8;
        font-style: italic;
      }

      .directions-fallback {
        text-align: center;
        padding: 16px;
        background: rgba(255, 193, 7, 0.1);
        border: 1px solid rgba(255, 193, 7, 0.3);
        border-radius: 12px;
        color: #ffc107;
      }

      /* Buttons */
      .button {
        width: 100%;
        padding: 16px 24px;
        border: none;
        border-radius: 16px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 12px;
        position: relative;
        overflow: hidden;
      }

      .button:last-child {
        margin-bottom: 0;
      }

      .button-primary {
        background: linear-gradient(45deg, #ff6b6b, #feca57);
        color: #ffffff;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
      }

      .button-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
      }

      .button-secondary {
        background: rgba(255, 255, 255, 0.2);
        color: #ffffff;
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .button-secondary:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-1px);
      }

      .button-success {
        background: linear-gradient(45deg, #48cae4, #023e8a);
        color: #ffffff;
        box-shadow: 0 4px 15px rgba(72, 202, 228, 0.4);
      }

      .button-success:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(72, 202, 228, 0.6);
      }

      .button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      /* Leaderboard */
      .leaderboard-list {
        list-style: none;
        max-height: 300px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
      }

      .leaderboard-list::-webkit-scrollbar {
        width: 6px;
      }

      .leaderboard-list::-webkit-scrollbar-track {
        background: transparent;
      }

      .leaderboard-list::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
      }

      .leaderboard-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        margin-bottom: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.15);
        transition: all 0.2s ease;
      }

      .leaderboard-item:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateX(4px);
      }

      .leaderboard-item.rank-1 {
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #333;
        font-weight: 600;
      }

      .leaderboard-item.rank-2 {
        background: linear-gradient(45deg, #c0c0c0, #e8e8e8);
        color: #333;
        font-weight: 600;
      }

      .leaderboard-item.rank-3 {
        background: linear-gradient(45deg, #cd7f32, #daa520);
        color: #fff;
        font-weight: 600;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .player-rank {
        font-weight: 700;
        font-size: 1.1rem;
      }

      .player-name {
        font-weight: 500;
      }

      .player-points {
        font-weight: 600;
        opacity: 0.9;
      }

      /* Loading States */
      .loading {
        text-align: center;
        padding: 20px;
        opacity: 0.7;
      }

      .spinner {
        width: 32px;
        height: 32px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 12px;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }

        100% {
          transform: rotate(360deg);
        }
      }

      /* Responsive Design */
      @media (max-width: 480px) {
        .container {
          padding: 16px;
        }

        .header h1 {
          font-size: 2rem;
        }

        .card {
          padding: 20px;
        }

        .user-stats {
          grid-template-columns: 1fr;
        }
      }

      /* Animations */
      .card {
        animation: slideUp 0.6s ease-out;
      }

      .card:nth-child(2) {
        animation-delay: 0.1s;
      }

      .card:nth-child(3) {
        animation-delay: 0.2s;
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }

        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
  </head>

  <body>
    <div class="container">
      <!-- Header -->
      <div class="header">
        <h1>🎮 POI Quest</h1>
        <div class="subtitle">Adventure awaits around every corner</div>
      </div>

      <!-- User Profile Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">👤</div>
          <h2>Your Profile</h2>
        </div>
        <div class="user-stats">
          <div class="stat-item">
            <div class="stat-value" id="userPoints">
              <%= userStats ? userStats.total_points : 0 %>
            </div>
            <div class="stat-label">Total Points</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="userQuests">
              <%= userStats ? userStats.quests_completed : 0 %>
            </div>
            <div class="stat-label">Quests Completed</div>
          </div>
        </div>
        <% if (userId) { %>
        <div style="text-align: center; opacity: 0.8; font-size: 0.9rem">
          Logged in as: <strong> <%= userId %> </strong>
        </div>
        <% } else { %>
        <div style="text-align: center; opacity: 0.8; color: #feca57">
          ⚠️ Not logged in
        </div>
        <% } %>
      </div>

      <!-- Current Quest Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">🎯</div>
          <h2>Current Quest</h2>
        </div>

        <div id="questDisplay">
          <% if (currentQuest && questTemplate) { %>
          <div class="quest-content">
            <div class="quest-title"><%= questTemplate.title %></div>
            <div class="quest-description">
              <%= questTemplate.description %>
            </div>
            <div class="quest-details">
              <div class="quest-detail-item">
                <span>📍</span>
                <span
                  ><strong> <%= questTemplate.location_name %> </strong></span
                >
              </div>
              <div class="quest-detail-item">
                <span>🏠</span>
                <span> <%= questTemplate.location_address %> </span>
              </div>
              <div class="quest-detail-item">
                <span>🏆</span>
                <span
                  ><strong> <%= questTemplate.points %> points </strong></span
                >
              </div>
              <% if (questTemplate.required_items &&
              questTemplate.required_items.length> 0) { %>
              <div class="quest-detail-item">
                <span>🎒</span>
                <span
                  >Bring: <%= Array.isArray(questTemplate.required_items) ?
                  questTemplate.required_items.join(', ') :
                  questTemplate.required_items %></span
                >
              </div>
              <% } %> <% if (questTemplate.historical_significance) { %>
              <div class="quest-detail-item">
                <span>🏛️</span>
                <span><%= questTemplate.historical_significance %></span>
              </div>
              <% } %> <% if (questTemplate.cultural_info) { %>
              <div class="quest-detail-item">
                <span>🎭</span>
                <span><%= questTemplate.cultural_info %></span>
              </div>
              <% } %>
            </div>
          </div>

          <!-- Directions Section -->
          <% if (directions) { %>
          <div class="directions-section">
            <div class="directions-header">
              <span>🧭</span>
              <h3>Walking Directions</h3>
              <span class="directions-distance">
                <%= directions.totalDuration ? directions.totalDistance + ' • '
                + directions.totalDuration : directions.totalDistance || '' %>
              </span>
            </div>
            <div class="directions-content">
              <% if (directions.fallback) { %>
              <div class="directions-fallback">
                <strong>📍 <%= directions.totalDistance %></strong><br />
                Directions unavailable - use your preferred maps app
              </div>
              <% } else if (directions.steps && directions.steps.length > 0) {
              %>
              <%
                // Define arrow mapping based on common direction keywords
                function getDirectionArrow(instruction) {
                  const lower = instruction.toLowerCase();
                  if (lower.includes('left') || lower.includes('turn left')) return '←';
                  if (lower.includes('right') || lower.includes('turn right')) return '→';
                  if (lower.includes('straight') || lower.includes('continue')) return '↑';
                  if (lower.includes('u-turn') || lower.includes('turn around')) return '↶';
                  if (lower.includes('slight left')) return '↖';
                  if (lower.includes('slight right')) return '↗';
                  if (lower.includes('sharp left')) return '↺';
                  if (lower.includes('sharp right')) return '↻';
                  if (lower.includes('north')) return '↑';
                  if (lower.includes('south')) return '↓';
                  if (lower.includes('east')) return '→';
                  if (lower.includes('west')) return '←';
                  return '•'; // Default bullet for unclear directions
                }
              %>
              <% directions.steps.forEach(function(step, index) { %>
              <div class="direction-step">
                <div class="direction-step-number"><%= getDirectionArrow(step.instruction) %></div>
                <div class="direction-step-content">
                  <div class="direction-step-instruction">
                    <%= step.instruction %>
                  </div>
                  <% if (step.distance && step.duration) { %>
                  <div class="direction-step-distance">
                    <%= step.distance %> • <%= step.duration %>
                  </div>
                  <% } %>
                </div>
              </div>
              <% }); %> <% } else { %>
              <div class="directions-error">Unable to load directions</div>
              <% } %>
            </div>
          </div>
          <% } %>

          <button class="button button-success" onclick="completeQuest()">
            ✅ Complete Quest
          </button>
          <button class="button button-secondary" onclick="rerollQuest()">
            🔄 Get Different Quest
          </button>
          <% } else { %>
          <div class="quest-content">
            <div style="text-align: center; padding: 20px; opacity: 0.8">
              <div style="font-size: 3rem; margin-bottom: 16px">🗺️</div>
              <div style="font-size: 1.2rem; margin-bottom: 8px">
                No Active Quest
              </div>
              <div style="font-size: 0.9rem">
                Ready to start your adventure?
              </div>
            </div>
          </div>

          <button class="button button-primary" onclick="getNewQuest()">
            🎯 Get New Quest
          </button>
          <% } %>
        </div>

        <div id="loading" class="loading" style="display: none">
          <div class="spinner"></div>
          <div>Generating your quest...</div>
        </div>
      </div>

      <!-- Leaderboard Card -->
      <div class="card">
        <div class="card-header">
          <div class="card-icon">🏆</div>
          <h2>Leaderboard</h2>
        </div>

        <ul class="leaderboard-list" id="leaderboard">
          <div class="loading">
            <div class="spinner"></div>
            <div>Loading leaderboard...</div>
          </div>
        </ul>
      </div>
    </div>

    <script>
      // API functions
      async function apiCall(endpoint, method = "POST") {
        const loading = document.getElementById("loading");
        loading.style.display = "block";

        try {
          const response = await fetch(endpoint, {
            method: method,
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (result.success) {
            // Reload the page to show updated quest state
            window.location.reload();
          } else {
            alert("Error: " + (result.message || "Something went wrong"));
          }
        } catch (error) {
          console.error("API Error:", error);
          alert("Error: Unable to communicate with server");
        } finally {
          loading.style.display = "none";
        }
      }

      function getNewQuest() {
        apiCall("/api/quest/new");
      }

      function completeQuest() {
        if (confirm("🎉 Are you sure you want to complete this quest?")) {
          apiCall("/api/quest/complete");
        }
      }

      function rerollQuest() {
        if (
          confirm(
            "🔄 Get a different quest? This will abandon your current quest."
          )
        ) {
          apiCall("/api/quest/reroll");
        }
      }

      // Leaderboard functionality
      async function loadLeaderboard() {
        try {
          const res = await fetch("/api/leaderboard");
          const data = await res.json();

          if (!data || !Array.isArray(data)) {
            throw new Error("Invalid leaderboard data");
          }

          data.sort((a, b) => b.total_points - a.total_points);

          const list = document.getElementById("leaderboard");
          list.innerHTML = "";

          if (data.length === 0) {
            list.innerHTML = ' <div class="loading">No players yet</div>';
            return;
          }

          data.forEach((player, index) => {
            const li = document.createElement("li");
            li.className = `leaderboard-item ${
              index < 3 ? "rank-" + (index + 1) : ""
            }`;
            li.innerHTML = ` <div
                  class="player-info">
                  <spa;n class="player-rank">#${index + 1}</span>
                    <span class="player-name">${player.id}</span>
            </div>
            <span class="player-points">${player.total_points} pts</span>
            `;

            list.appendChild(li);
          });
        } catch (err) {
          console.error("Failed to load leaderboard:", err);
          const list = document.getElementById("leaderboard");
          list.innerHTML =
            '<div class="loading">Failed to load leaderboard</div>';
        }
      }

      // Auto-refresh functionality
      function startAutoRefresh() {
        // Refresh leaderboard every 30 seconds
        setInterval(loadLeaderboard, 30000);

        // Refresh page every 2 minutes if not loading
        setInterval(() => {
          const loading = document.getElementById("loading");
          if (loading.style.display !== "block") {
            loadLeaderboard();
          }
        }, 120000);
      }

      // Initialize on page load
      window.addEventListener("DOMContentLoaded", () => {
        loadLeaderboard();
        startAutoRefresh();
      });

      // Add some visual feedback for button interactions
      document.addEventListener("click", function (e) {
        if (e.target.classList.contains("button")) {
          e.target.style.transform = "scale(0.98)";
          setTimeout(() => {
            e.target.style.transform = "";
          }, 150);
        }
      });
    </script>
  </body>
</html>
